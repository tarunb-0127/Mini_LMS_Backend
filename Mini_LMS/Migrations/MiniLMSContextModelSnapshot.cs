// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Mini_LMS.Models;

#nullable disable

namespace Mini_LMS.Migrations
{
    [DbContext(typeof(MiniLMSContext))]
    partial class MiniLMSContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_0900_ai_ci")
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");
            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Mini_LMS.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("Duration")
                        .HasColumnType("int");

                    b.Property<bool?>("IsApproved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("TrainerId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Visibility")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("enum('Public','Hidden')")
                        .HasDefaultValueSql("'Hidden'");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "TrainerId" }, "TrainerId");

                    b.ToTable("courses", (string)null);
                });

            modelBuilder.Entity("Mini_LMS.Models.CourseApproval", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RequestedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("RequestedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RespondedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("enum('Pending','Approved','Rejected')")
                        .HasDefaultValueSql("'Pending'");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CourseId" }, "CourseId");

                    b.HasIndex(new[] { "RequestedBy" }, "RequestedBy");

                    b.ToTable("course_approvals", (string)null);
                });

            modelBuilder.Entity("Mini_LMS.Models.CourseTakedownRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.Property<DateTime>("RequestedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("RequestedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RespondedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("enum('Pending','Removed','Rejected')")
                        .HasDefaultValueSql("'Pending'");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CourseId" }, "CourseId")
                        .HasDatabaseName("CourseId1");

                    b.HasIndex(new[] { "RequestedBy" }, "RequestedBy")
                        .HasDatabaseName("RequestedBy1");

                    b.ToTable("course_takedown_requests", (string)null);
                });

            modelBuilder.Entity("Mini_LMS.Models.Emailotp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("ExpiryTime")
                        .HasColumnType("datetime");

                    b.Property<string>("OtpCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Email" }, "IX_emailotps_Email")
                        .IsUnique();

                    b.ToTable("emailotps", (string)null);
                });

            modelBuilder.Entity("Mini_LMS.Models.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("LearnerId")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ModuleId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime>("SubmittedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CourseId" }, "CourseId")
                        .HasDatabaseName("CourseId2");

                    b.HasIndex(new[] { "LearnerId" }, "LearnerId");

                    b.HasIndex(new[] { "ModuleId" }, "ModuleId");

                    b.ToTable("feedbacks", (string)null);
                });

            modelBuilder.Entity("Mini_LMS.Models.Module", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Difficulty")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FilePath")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CourseId" }, "CourseId")
                        .HasDatabaseName("CourseId3");

                    b.ToTable("modules", (string)null);
                });

            modelBuilder.Entity("Mini_LMS.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "UserId" }, "UserId");

                    b.ToTable("notifications", (string)null);
                });

            modelBuilder.Entity("Mini_LMS.Models.Passwordreset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("ExpiryTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "UserId" }, "UserId")
                        .HasDatabaseName("UserId1");

                    b.ToTable("passwordresets", (string)null);
                });

            modelBuilder.Entity("Mini_LMS.Models.Passwordtoken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("ExpiryTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "UserId" }, "UserId")
                        .HasDatabaseName("UserId2");

                    b.ToTable("passwordtokens", (string)null);
                });

            modelBuilder.Entity("Mini_LMS.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("password_hash");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("role");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<string>("Username")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Email" }, "email")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Mini_LMS.Models.Course", b =>
                {
                    b.HasOne("Mini_LMS.Models.User", "Trainer")
                        .WithMany("Courses")
                        .HasForeignKey("TrainerId")
                        .IsRequired()
                        .HasConstraintName("courses_ibfk_1");

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("Mini_LMS.Models.CourseApproval", b =>
                {
                    b.HasOne("Mini_LMS.Models.Course", "Course")
                        .WithMany("CourseApprovals")
                        .HasForeignKey("CourseId")
                        .IsRequired()
                        .HasConstraintName("course_approvals_ibfk_1");

                    b.HasOne("Mini_LMS.Models.User", "RequestedByNavigation")
                        .WithMany("CourseApprovals")
                        .HasForeignKey("RequestedBy")
                        .IsRequired()
                        .HasConstraintName("course_approvals_ibfk_2");

                    b.Navigation("Course");

                    b.Navigation("RequestedByNavigation");
                });

            modelBuilder.Entity("Mini_LMS.Models.CourseTakedownRequest", b =>
                {
                    b.HasOne("Mini_LMS.Models.Course", "Course")
                        .WithMany("CourseTakedownRequests")
                        .HasForeignKey("CourseId")
                        .IsRequired()
                        .HasConstraintName("course_takedown_requests_ibfk_1");

                    b.HasOne("Mini_LMS.Models.User", "RequestedByNavigation")
                        .WithMany("CourseTakedownRequests")
                        .HasForeignKey("RequestedBy")
                        .IsRequired()
                        .HasConstraintName("course_takedown_requests_ibfk_2");

                    b.Navigation("Course");

                    b.Navigation("RequestedByNavigation");
                });

            modelBuilder.Entity("Mini_LMS.Models.Feedback", b =>
                {
                    b.HasOne("Mini_LMS.Models.Course", "Course")
                        .WithMany("Feedbacks")
                        .HasForeignKey("CourseId")
                        .IsRequired()
                        .HasConstraintName("feedbacks_ibfk_2");

                    b.HasOne("Mini_LMS.Models.User", "Learner")
                        .WithMany("Feedbacks")
                        .HasForeignKey("LearnerId")
                        .IsRequired()
                        .HasConstraintName("feedbacks_ibfk_1");

                    b.HasOne("Mini_LMS.Models.Module", "Module")
                        .WithMany("Feedbacks")
                        .HasForeignKey("ModuleId")
                        .HasConstraintName("feedbacks_ibfk_3");

                    b.Navigation("Course");

                    b.Navigation("Learner");

                    b.Navigation("Module");
                });

            modelBuilder.Entity("Mini_LMS.Models.Module", b =>
                {
                    b.HasOne("Mini_LMS.Models.Course", "Course")
                        .WithMany("Modules")
                        .HasForeignKey("CourseId")
                        .IsRequired()
                        .HasConstraintName("modules_ibfk_1");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Mini_LMS.Models.Notification", b =>
                {
                    b.HasOne("Mini_LMS.Models.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("notifications_ibfk_1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Mini_LMS.Models.Passwordreset", b =>
                {
                    b.HasOne("Mini_LMS.Models.User", "User")
                        .WithMany("Passwordresets")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("passwordresets_ibfk_1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Mini_LMS.Models.Passwordtoken", b =>
                {
                    b.HasOne("Mini_LMS.Models.User", "User")
                        .WithMany("Passwordtokens")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("passwordtokens_ibfk_1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Mini_LMS.Models.Course", b =>
                {
                    b.Navigation("CourseApprovals");

                    b.Navigation("CourseTakedownRequests");

                    b.Navigation("Feedbacks");

                    b.Navigation("Modules");
                });

            modelBuilder.Entity("Mini_LMS.Models.Module", b =>
                {
                    b.Navigation("Feedbacks");
                });

            modelBuilder.Entity("Mini_LMS.Models.User", b =>
                {
                    b.Navigation("CourseApprovals");

                    b.Navigation("CourseTakedownRequests");

                    b.Navigation("Courses");

                    b.Navigation("Feedbacks");

                    b.Navigation("Notifications");

                    b.Navigation("Passwordresets");

                    b.Navigation("Passwordtokens");
                });
#pragma warning restore 612, 618
        }
    }
}
